from typing import Optional

import pytest
from pydantic.error_wrappers import ValidationError

from arabesque_py.config.db_config import DBConfig
from arabesque_py.config.default_config import DefaultConfig
from arabesque_py.config.environment import Environment


def test_default_config():
    class ConfigWithDefault(DefaultConfig):
        pass

    config = ConfigWithDefault(env_file="test/mock/default_config.env")
    assert config.environment == Environment.DEVELOPMENT
    assert config.application_name == "app_name"
    assert config.debug is True


def test_inheritance_config():
    class ConfigWithInheritance(DefaultConfig, DBConfig):
        pass

    config = ConfigWithInheritance(env_file="test/mock/inheritance.env")

    assert config.environment == Environment.STAGING
    assert config.application_name == "app_name_2"
    assert config.debug is True
    assert config.db_username == "username"
    assert config.db_password == "password"
    assert config.db_host == "host"
    assert config.db_database == "database"
    assert config.db_port == 5432
    assert config.db_pool_size == 100
    assert config.db_debug is False


def test_validation_error_config():
    class ConfigWithValidationError(DefaultConfig):
        env_var_might_be_set: str
        pass

    with pytest.raises(ValidationError) as excinfo:
        ConfigWithValidationError(env_file="test/mock/validation_error.env")

    assert "env_var_might_be_set" in str(excinfo.value)
    assert "value_error.missing" in str(excinfo.value)


def test_validation_optional_config():
    class ConfigWithOptional(DefaultConfig):
        env_var_might_be_set: Optional[str] = None
        pass

    optional_set = ConfigWithOptional(env_file="test/mock/optional_set.env")
    assert optional_set.env_var_might_be_set == "set"

    optional_unset = ConfigWithOptional(env_file="test/mock/empty.env")
    assert optional_unset.env_var_might_be_set is None
