import argparse
import logging

import pandas as pd

from aamfsql_loader.load_from_aamfsql.assetinfo_100 import upload as upload_assetinfo
from aamfsql_loader.load_from_aamfsql.esg_260 import upload as upload_esg
from aamfsql_loader.load_from_aamfsql.esg_materiality_260 import upload as upload_esg_materiality
from aamfsql_loader.load_from_aamfsql.esg_materiality_daily_260 import upload as upload_esg_materiality_daily
from aamfsql_loader.load_from_aamfsql.features_260 import upload as upload_features
from aamfsql_loader.load_from_aamfsql.gc_260 import upload as upload_gc
from aamfsql_loader.load_from_aamfsql.pf_260 import upload as upload_pf
from aamfsql_loader.load_from_aamfsql.temperature_100 import upload as upload_temperature

log = logging.getLogger(__name__)


def main(start, end, datasets=None):

    funcs = {
        'assetinfo': upload_assetinfo,
        'pf': upload_pf,
        'esg': upload_esg,
        'esg_materiality': upload_esg_materiality,
        'esg_materiality_daily': upload_esg_materiality_daily,
        'features': upload_features,
        'gc': upload_gc,
        'temperature': upload_temperature,
    }

    if datasets is None:
        datasets = list(funcs.keys())

    for dataset in datasets:
        log.info(f'Starting {dataset}')
        function = funcs[dataset]
        try:
            function(start, end)
        except Exception as e:
            log.error(f'Failed {dataset}')
            log.error(str(e))


if __name__ == '__main__':
    log.info('Starting main')
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--date_start', default="today", dest='date_start')
        parser.add_argument('--date_end', default="today", dest='date_end')
        parser.add_argument('--datasets', default=None, nargs='+', type=str)

        args = parser.parse_args()
        start = args.date_start
        end = args.date_end
        datasets = args.datasets

        if start == 'today':
            start = f'{pd.Timestamp.now().normalize():%Y-%m-%d}'
        if end == 'today':
            end = f'{pd.Timestamp.now().normalize():%Y-%m-%d}'
        main(start, end, datasets)
    except Exception as e:
        log.error('Application failed')
        log.error(str(e))