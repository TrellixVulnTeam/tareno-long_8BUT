import logging
from typing import List, Union

import pandas as pd

from aamfsql_loader.load_from_aamfsql.cnxn import get_engine
from sray_db.apps.app import Field
from sray_db.apps.pk import PrimaryKey
from sray_db.psql.interface import PSQLTable

log = logging.getLogger(__name__)
engine = get_engine()


def query_to_interface(query: str, app: 'App', load_idx_to_overwrite: Union[None, List[pd.Index]] = None):
    interface = PSQLTable.from_app(app)

    data = pd.read_sql(query, engine)
    renamed = rename_df(data, app)

    log.info(f'Inserting {len(renamed)} rows into {interface.table.name}')
    try:
        interface.put(renamed, load_idx_to_overwrite=load_idx_to_overwrite)
        log.info(f'Completed inserting into {interface.table.name}')
    except:
        log.info(f'!!!!Failed inserting into {interface.table.name}!!!!')
        raise


def rename_df(df: pd.DataFrame, app: 'App'):
    rename = {key: field for key, field in app.items()}
    for pk in app.primary_keys:
        rename[pk.value] = pk

    df = df.rename(columns=rename).set_index(app.primary_keys)

    unparsed = [c for c in df.columns if not isinstance(c, (Field, PrimaryKey))]
    if len(unparsed) > 0:
        raise ValueError(f'Couldn\'t parse columns {", ".join(unparsed)}')

    return df
