from typing import Any, Dict, List

import pandas as pd
from sray_db.interface import DataInterface
from sray_db.apps import apps
from sray_db.apps.field import Field
from sray_db.apps.pk import PrimaryKey


class CSVInterface(DataInterface):

    def __init__(self, csv_path: str, primary_keys: List[PrimaryKey], hierarchy: str = 'security',
                 set_types: Dict[str, str] = None):
        self.csv_path = csv_path
        self.primary_keys = primary_keys
        self.hierarchy = hierarchy
        self.set_types = set_types or {}

        self._store = {}

    @property
    def registered_fields(self):
        """Returns a list of Fields that are stored in the DataStore"""
        return list(self._store)

    def get(self, fields: List[Field], distinct: bool, load_idx: List[pd.Index] = None,
            load_pks: bool = True):
        """GET query"""

        load_idx = load_idx or []
        results = [self._get_single(field, distinct, load_idx) for field in fields]
        result = pd.concat(results, axis=1)

        if load_pks is not True:
            result = result.reset_index(drop=True)

        return result

    def _get_single(self, field: Field, distinct: bool, load_idx: List[pd.Index]) -> pd.Series:

        result = self._store[field]
        new_idx = result.index
        for idx in load_idx:
            new_idx = new_idx.join(idx, how='inner')
            result = result.reindex(new_idx)

        if distinct is True:
            result = result.unique()

        result.name = field

        return result.to_frame()

    def put(self):
        raise NotImplementedError()

    def install(self):
        """Function to be called upon creation of a new DataStore to persistently
        install the DataStore and allow opening and closing it"""

        self._store = self._parse_csv()

    def uninstall(self):
        """Function to be called upon deletion of a DataStore"""
        pass

    def open(self):
        """Function called by context manager upon open to allow for get and
        put query calls"""
        pass

    def close(self):
        """Function called by context manager upon exit to deallocate all relevant
        resources"""
        pass

    def _parse_csv(self) -> Dict[Field, pd.Series]:
        pk_headers = [pk.name for pk in self.primary_keys]
        headers = ['app', 'major', 'minor', 'build', 'revision', 'field', 'value'] + pk_headers
        data = pd.read_csv(self.csv_path)
        assert set(headers) == set(data.columns), 'Header mismatch'

        for key, type_ in self.set_types.items():
            data[key] = data[key].astype(type_)

        data['unv_app_'] = data['app'].apply(lambda x: apps[x])
        data['version_'] = list(zip(data.major, data.minor, data.build, data.revision))
        data['vers_app_'] = data.apply(lambda x: x['unv_app_'][x['version_']], axis=1)
        data['field_'] = data.apply(lambda x: x['vers_app_'][x['field']], axis=1)
        data = data.rename(columns={pkh: PrimaryKey(pkh) for pkh in pk_headers}).set_index(self.primary_keys)

        unique_fields = data['field_'].unique()
        result = {}
        for u in unique_fields:
            result[u] = data[data.field_ == u]['value']

        return result
