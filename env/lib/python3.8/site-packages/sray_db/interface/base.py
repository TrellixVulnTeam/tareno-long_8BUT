from abc import ABC, abstractmethod
from typing import List, Union

import pandas as pd
from sray_db.apps.field import Field


class DataInterface(ABC):
    @property
    @abstractmethod
    def __init__(self):
        pass

    @property
    @abstractmethod
    def registered_fields(self):
        """Returns a list of Fields that are stored in the DataStore"""
        pass

    @abstractmethod
    def get(self, fields: List[Field], distinct: bool, load_idx: List[pd.Index],
            load_pks: bool, hierarchy: str, as_of: Union[pd.Timestamp, None] = None) -> pd.DataFrame:
        """GET query"""
        pass

    @abstractmethod
    def put(self, data: pd.DataFrame, load_cutoff: Union[pd.Timestamp, None] = None,
            load_idx_to_overwrite: List[pd.Index] = None) -> int:
        """PUT query"""
        pass

    @abstractmethod
    def delete(self, fields: List[Field], load_idx: List[pd.Index]) -> int:
        """DELETE query"""
        pass

    @abstractmethod
    def install(self):
        """Function to be called upon creation of a new DataStore to persistently
        install the DataStore and allow opening and closing it"""
        pass

    @abstractmethod
    def uninstall(self):
        """Function to be called upon deletion of a DataStore"""
        pass

    @abstractmethod
    def open(self):
        """Function called by context manager upon open to allow for get and 
        put query calls"""
        pass

    @abstractmethod
    def close(self):
        """Function called by context manager upon exit to deallocate all relevant
        resources"""
        pass

    def __enter__(self):
        self.open()
        return self
    
    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.close()