import os
from pathlib import Path
from typing import List

import yaml

config = yaml.safe_load(open(os.path.join(os.path.dirname(__file__), 'config.yaml')))


def get_missing_env_vars(var_names: List[str]) -> List[str]:

    missing_vars = []
    for var in var_names:
        try:
            _ = os.environ[var]
        except KeyError:
            missing_vars.append(var)

    return missing_vars


# Check SQL connection details provided
env_only_vars = ['SRAYDB_SQL_USERNAME',
                 'SRAYDB_SQL_PASSWORD',
                 'SRAYDB_SQL_HOST',
                 'SRAYDB_SQL_PORT']

missing_vars = get_missing_env_vars(env_only_vars)
if len(missing_vars) > 0:
    raise Exception(f'Secret environment variables haven\'t been defined, please see README.md for more info. (Missing '
                    f'variables: {missing_vars})')

for var in env_only_vars:
    config[var] = os.environ[var]

# Overwrite all config values with environment variable, if present
for key, value in config.items():
    config[key] = os.environ.get(key, value)


# Check certificates can be accessed
certificates = ['SRAYDB_SQL_SSLROOTCERT',
                'SRAYDB_SQL_SSLKEY',
                'SRAYDB_SQL_SSLCERT']

connect_with_ssl = config['SRAYDB_SQL_USE_SSL'] == '1'
if connect_with_ssl:
    for certificate in certificates:
        path = os.environ.get(certificate, None)
        if path is None:
            raise Exception(f'SRAYDB_SQL_USE_SSL is set to True, but no path for {certificate} was defined.')
        certificate_exists = Path(path).is_file()

        if not certificate_exists:
            raise Exception(f'SSL certificate {certificate} with path {path} could not be read. ')
        else:
            config[certificate] = path
