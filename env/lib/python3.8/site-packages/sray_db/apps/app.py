# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 14:31:24 2019

@author: dbraems
"""
import logging
import typing
from typing import Union

from sray_db.apps.app_config import AppConfig
from sray_db.apps.field import Field
from sray_db.apps.pk import PrimaryKey

log = logging.getLogger(__name__)


class App(dict):
    def __init__(self, app_config: AppConfig, unversioned_app: 'UnversionedApp'):
        self.name = app_config.name
        self.description = app_config.description
        self.frequency = app_config.frequency
        self.hierarchy = app_config.hierarchy
        self.version_string = app_config.version_string
        self.version = app_config.version
        
        self.fullname = self.name + '_' + self.version_string
        self.config = app_config
        self.unversioned_app = unversioned_app
        self.apps = unversioned_app.apps
        
        self.primary_keys = [PrimaryKey(pk) for pk in app_config.primary_keys]

        for field in self._get_system_fields():
            self[field.name] = field
        
        for f in app_config.field_dicts:
            name = f['field_name']
            description = f.get('description', '')
            type = f['type']
            self[name] = Field(self, name, description, type)
            
    def get_field(self, field_name: str) -> Union[Field, None]:
        if field_name in self:
            return self[field_name]
        else:
            log.info(f'No field with name {field_name} for {self}')
            return None

    def _get_system_fields(self) -> typing.List[Field]:
        date_created = Field(
            app=self,
            field_name='date_created',
            description=f'UTC Timestamp of when the f{self.name} application data was created',
            type='DateTime',
            is_system_field=True,
        )
        load_cutoff = Field(
            app=self,
            field_name='load_cutoff',
            description=f'UTC Timestamp used by the application to represent the maximum `date_created` (i.e. the time '
                        f'a datapoint was published to sray_db) of input data that is loaded by the application to '
                        f'calculate its outputs',
            type='DateTime',
            is_system_field=True
        )

        return [date_created, load_cutoff]
    
    def __repr__(self) -> str:
        return f'<App {self.name} ({".".join(str(i) for i in self.version)})>'