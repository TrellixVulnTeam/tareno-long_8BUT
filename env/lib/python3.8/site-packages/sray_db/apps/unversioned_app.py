# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 14:31:44 2019

@author: dbraems
"""

from __future__ import annotations

import logging
from pathlib import Path
from typing import Tuple, Union, List, TYPE_CHECKING

from sray_db.apps.app import App
from sray_db.apps.app_config import AppConfig
from sray_db.apps.field import Field

if TYPE_CHECKING:
    from sray_db.apps.registry import Registry

VersionType = Tuple[int, int, int, int]

log = logging.getLogger(__name__)


class UnversionedApp(dict):    
    def __init__(self, app_name: str, configs: List[AppConfig], override_tuples: List[Tuple[App, Path]], apps: Registry):
        self.name = app_name
        self.apps = apps
        
        # Filters the configs, only get all versions of this app
        version_strings = set([config.version for config in configs if config.name == app_name])

        for version_string in version_strings:
            versioned_app_config = [config for config in configs if ((config.name == app_name) and
                                                                     (config.version == version_string))]
            
            # Make sure there are one qpp config for the same app and version
            assert len(versioned_app_config) == 1
            versioned_app_config = versioned_app_config[0]
            
            # Check if there is a custom class passed for this config file, if not use base class
            cls = next((x[0] for x in override_tuples if x[1] == versioned_app_config.config_path), None)
            if cls is None:
                cls = App
            
            versioned_app = cls(versioned_app_config, self)   
            self[versioned_app.version] = versioned_app
    
    def __repr__(self) -> str:
        return f'UnversionedApp(name={self.name}, versions={len(self.keys())})'
        
    def get_app(self, version: VersionType) -> Union[App, None]:
        if version in self:
            return self[version]
        else:
            return None
        
    def get_field(self, version: VersionType, field_name: str) -> Union[Field, None]:
        versioned_app = self.get_app(version)
        
        if versioned_app is None:
            log.info(f'Version tuple {version} not found for app {self.name}')
            return None
        
        return versioned_app.get_field(field_name)
