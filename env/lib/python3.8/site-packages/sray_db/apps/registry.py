import logging
from pathlib import Path
from typing import List, Tuple, Union

from sray_db.apps.app import App, Field
from sray_db.apps.app_config import AppConfig
from sray_db.apps.unversioned_app import UnversionedApp

log = logging.getLogger(__name__)
VersionType = Tuple[int, int, int, int]


class Registry(dict):
    def __init__(self, configs: List[AppConfig], override_tuples: List[Tuple[App, Path]]):
        app_names = set([config.name for config in configs])
        
        for app_name in app_names:
            unversioned_app = UnversionedApp(app_name, configs, override_tuples, self)
            self[app_name] = unversioned_app
            
    def __repr__(self) -> str:
        return f'Apps(unversioned_apps={len(self.keys())}, total_apps={len(self.all_apps)})'
    
    def get_app(self, app_name: str, version: VersionType = None) -> Union[UnversionedApp, App, None]:
        if app_name in self:
            unversioned_app = self[app_name]
            if version is not None:
                return unversioned_app.get_app(version)
            else:
                return unversioned_app
        else:
            return None
        
    def get_field(self, app_name: str, version: VersionType, field_name: str) -> Union[Field, None]:
        versioned_app = self.get_app(app_name, version)
        
        if versioned_app is None:
            log.info(f'App not found for name {app_name} and version {version}')
            return None
        
        return versioned_app.get_field(field_name)
        
    @property
    def all_apps(self) -> List[App]:
        all_apps = []
        for unversioned_app in self.values():
            for versioned_app in unversioned_app.values():
                all_apps.append(versioned_app)
        return all_apps
