from __future__ import annotations

from typing import Tuple, TYPE_CHECKING, Any, Dict

import sqlalchemy.sql.sqltypes as sqltypes

if TYPE_CHECKING:
    from sray_db.apps.app import App

VersionType = Tuple[int, int, int, int]


class Field:
    def __init__(self, app: App, field_name: str, description: str, type: str, is_system_field: bool = False):
        self.name = field_name
        self.description = description
        self.app = app
        self.type = vars(sqltypes)[type]
        self.is_system_field = is_system_field

    @property
    def key(self):
        return self.app_name, self.version, self.name

    @property
    def value(self) -> str:
        return f'{self.app.name}_{self.app.version_string}_{self.name}'

    @property
    def version(self) -> VersionType:
        return self.app.version

    @property
    def app_name(self) -> str:
        return self.app.name

    def serialize(self) -> Dict[str, Any]:
        return {'field_name': self.name,
                'app_name': self.app.name,
                'app_version': self.app.version_string}

    def __copy__(self):
        return self

    def __deepcopy__(self, memo):
        return self

    def __repr__(self) -> str:
        return f'<{self.__class__.__qualname__} {self.name} on {repr(self.app)}>'

    def __lt__(self, other):
        return self.key < other.key