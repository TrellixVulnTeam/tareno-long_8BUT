"""
This module contains functionality to attach attributes with default values to a class. These attributes
can be required
"""

# TODO(@gilj): Move this to it's own library.


class ValueNotSetException:
    pass


_NO_DEFAULT = object()


class Value:
    @property
    def default(self):
        if self.has_default:
            return self._default
        else:
            raise ValueError()

    @property
    def has_default(self):
        return self._default != _NO_DEFAULT

    def __init__(self, default=_NO_DEFAULT, is_required=False, transform_func=None):
        self._default = default
        self.is_required = is_required

        if transform_func is None:
            self.transform_func = lambda x: x
        else:
            self.transform_func = transform_func

    def __set__(self, instance, value):
        instance._key_value_store[self._name] = self.transform_func(value)

    def __get__(self, instance, owner):
        try:
            return instance._key_value_store[self._name]
        except KeyError:
            return self.default

    def is_set(self, instance):
        return self.has_default or self._name in instance._key_value_store


class KeyValueStoreMeta(type):
    def __new__(mcs, name, bases, cls_attrs):
        cls_obj = super().__new__(mcs, name, bases, cls_attrs)

        cls_obj._values = {n: f for n, f in cls_attrs.items() if isinstance(f, Value)}
        for name, field in cls_obj._values.items():
            field._name = name

        return cls_obj

    def __call__(cls, *args, **kwargs):
        obj = type.__call__(cls, *args, **kwargs)

        fields_to_check = {}
        key_value_stores = [
            c
            for c in reversed(cls.__mro__)
            if issubclass(c, KeyValueStore) and hasattr(cls, "_values")
        ]
        for kvs_cls in key_value_stores:
            fields_to_check.update(kvs_cls._values)

        not_set_fields = [
            f._name
            for f in fields_to_check.values()
            if f.is_required and not f.is_set(obj)
        ]
        if not_set_fields:
            raise Exception(f'Required fields "{", ".join(not_set_fields)}" not set.')

        return obj


class KeyValueStore(metaclass=KeyValueStoreMeta):
    def __new__(cls, *args, **kwargs):
        obj = super().__new__(cls)  # Calls object, so shouldn't take any parameters
        obj._key_value_store = {}
        return obj

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)
