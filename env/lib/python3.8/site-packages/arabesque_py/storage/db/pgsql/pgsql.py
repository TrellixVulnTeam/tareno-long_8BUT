"""
Module for adding a PostgreSQL DB to your service

Examples::

    from arabesque_py.api.middleware.sqlalchemy_session import SQLAlchemySessionMiddleware
    from arabesque_py.storage.db.pgsql.pgsql import PgSQL, PgSQLConfig
    from arabesque_py.config.config import Config as ServiceConfig
    from arabesque_py.api.default_api import DefaultAPI

    class Config(ServiceConfig):
        application_name: str = "example_app"
        # ... other config here ...
        db_username: str
        db_password: str
        db_host: str
        db_database: str
        db_port: str
        # ... other config here ...

    config = Config()

    # You can either load it in manually like below
    cfg = PgSQLConfig()
    cfg.username = config.db_username
    cfg.password = config.db_password
    cfg.host = config.db_host
    cfg.port = config.db_port
    cfg.db_database = config.db_database

    # Or load it in dynamically like below:
    cfg = PgSQLConfig.from_config(config)

    pgsql = PgSQL(cfg)
"""
from sqlalchemy import create_engine
from sqlalchemy.engine import Engine
from sqlalchemy.orm import sessionmaker

from arabesque_py.storage.db.pgsql.config import PgSQLConfig


class PgSQL:
    """
    A PgSQL instance, holds the engine details as well as the session maker.
    """

    config: PgSQLConfig
    engine: Engine
    session: sessionmaker

    def __init__(self, config: PgSQLConfig):
        """
        Args:
            config: The PgSQLConfig
        """
        self.config = config
        self.engine = create_engine(
            f"postgresql+psycopg2://{config.username}:{config.password}@{config.host}:{config.port}/{config.database}",
            pool_size=config.pool_size,
            echo=config.debug,
        )
        self.session = sessionmaker(bind=self.engine)
