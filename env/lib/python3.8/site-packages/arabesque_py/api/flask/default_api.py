import json
import os
from typing import Callable, List

from apispec import APISpec
from apispec.core import Components
from apispec.ext.marshmallow import MarshmallowPlugin
from apispec_flask_restful import RestfulPlugin
from flask import Flask
from flask_cors import CORS
from flask_restful import Api

from arabesque_py.api.flask.default_internal_listener import DefaultInternalListener
from arabesque_py.api.flask.middleware.context_logger import ContextLoggerMiddleware
from arabesque_py.api.flask.middleware.request_id import RequestIDMiddleware
from arabesque_py.api.flask.middleware.request_logger import RequestLoggerMiddleware
from arabesque_py.config.config import Config
from arabesque_py.prometheus import Prometheus
from arabesque_py.prometheus.flask_middleware import PrometheusFlaskMiddleware


class DefaultAPI(DefaultInternalListener):
    """
    The flask DefaultAPI features helpers for building simple APIs

    Examples::

        from apispec import APISpec
        from flask_restful import Resource
        from arabesque_py.api.flask.default_api import DefaultAPI
        from arabesque_py.api.flask.middleware.sqlalchemy_session import SQLAlchemySessionMiddleware
        from arabesque_py.api.flask.response.response import Response
        from arabesque_py.logging import setup as setup_logging
        from arabesque_py.storage.db.pgsql.pgsql import PgSQL, PgSQLConfig

        from config.config import Config
        from prometheus.prometheus import Prometheus

        class Test(Resource):
            def get(self):
                response = Response()
                return response.respond()


        spec = APISpec(
            title='Title',
            version='0.1',
            openapi_version='3.0.21212',
            info={
                'contact': {
                    'name': 'Example121212',
                    'email': 'example@exampl121212e.com'
                },
                'description': 'Example description',
            }
        )

        setup_logging()
        config = Config()
        prometheus = Prometheus(threaded=True)
        cfg = PgSQLConfig.from_config(config)
        pgsql = PgSQL(cfg)
        sqlmiddleware = SQLAlchemySessionMiddleware(pgsql.session)

        api = DefaultAPI(spec, prometheus, config, middleware=sqlmiddleware)

        api.add_route("/test", Test)
        api.start()
        provider = api.flask

        if __name__ == '__main__':
            provider.run(debug=False)
    """

    spec: APISpec
    prometheus: Prometheus
    config: Config

    def __init__(
        self,
        spec: APISpec,
        prometheus: Prometheus,
        config: Config,
        middleware: list = None,
        healthchecks: List[Callable[[], bool]] = None,
    ):
        """
        Args:
            spec (APISpec): The APISpec
            prometheus (Prometheus): The service prometheus instance
            config (Config): The service config
            middleware (list): Any extra middleware
            healthchecks (List[Callable[[], bool]]): Custom healthcheck
                functions to run on every healthcheck endpoint request
        """

        self.provider = Flask(__name__)
        CORS(self.provider, resources={r"*": {"origins": "*"}})
        self.api = Api(self.provider)

        self.spec = spec
        self.build_api_spec()

        self.middleware = [
            RequestIDMiddleware(),
            ContextLoggerMiddleware(),
            RequestLoggerMiddleware(),
            PrometheusFlaskMiddleware(prometheus.registry, prometheus.metrics_path),
            *self.parse_middleware(middleware),
        ]

        self.prometheus = prometheus
        self.config = config
        self.healthchecks = healthchecks

        self.register_internal_resources()

    def dump_spec(self, path: str = "./spec", filename: str = "/openapi-spec.json"):
        """
        Dumps the API spec to a specified director, creates the dir if doesn't
        exist

        Args:
            path: The directory to dump the spec to.
            filename: The file name of the spec.
        """
        if not os.path.exists(path):
            os.makedirs(path)

        for route, resource in self.routes.items():
            self.spec.path(
                resource=resource, path=route, api=self.api, app=self.provider
            )

        with open(f"{path}/{filename}", "w") as stream:
            json.dump(self.spec.to_dict(), stream)

    def build_api_spec(self):
        """
        Builds the API Spec, injects the plugins require for the DefaultAPI
        """
        if len(self.spec.plugins) == 0:
            self.spec.plugins = []
        self.spec.plugins.append(RestfulPlugin())
        self.spec.plugins.append(MarshmallowPlugin())

        self.spec.components = Components(self.spec.plugins, self.spec.openapi_version)

        for plugin in self.spec.plugins:
            plugin.init_spec(self.spec)
