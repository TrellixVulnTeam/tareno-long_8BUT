from abc import ABCMeta
from typing import List

from flask import Flask
from flask_restful import Api

from arabesque_py.api.falcon.res import readycheck
from arabesque_py.api.flask.middleware.middleware import Middleware


class Listener(metaclass=ABCMeta):
    """
    The listener can be used as a helper when you want to create your own APIs
    or services where the `DefaultAPI` does not fit the functionality you
    require.

    Both the `DefaultInternalListener` and `DefaultAPI` use this helper.
    """

    api: Api
    provider: Flask
    routes: dict = {}
    middleware: List[Middleware] = []

    def add_route(self, path: str, resource, **kwargs):
        """
        Add a route to the provider

        Args:
            path:
            resource:
            **kwargs:
        """
        self.routes[path] = resource
        self.api.add_resource(resource, path, **kwargs)

    def add_routes(self, routes: dict):
        """
        Add multiple routes to the provider

        Args:
            routes: The routes to add
        """
        for route, resource in routes.items():
            self.add_route(route, resource)

    def start(self):
        """
        The API is now ready to serve requests
        """
        for middleware in self.middleware:
            self.provider.before_request(middleware.before_request)
            self.provider.after_request(middleware.after_request)

        readycheck.ready = True
