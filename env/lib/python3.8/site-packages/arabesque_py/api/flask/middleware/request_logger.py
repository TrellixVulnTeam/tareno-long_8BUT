from typing import List

import structlog
from flask import Response, g, request

from arabesque_py.api.flask.middleware.middleware import Middleware


class RequestLoggerMiddleware(Middleware):
    ignore_paths: List[str] = [
        "/_internal/healthcheck",
        "/_internal/readycheck",
    ]

    def __init__(self, *ignore_paths: str):
        """
        This middleware logs the request and the response

        Args:
            *ignore_paths: A tuple of ignore paths
        """
        self.ignore_paths.extend(list(ignore_paths))

    def before_request(self):
        """
        Logs the request in if the path is not in the ignore paths
        """
        if request.path not in self.ignore_paths:
            logger = self.get_logger()
            logger.info("request in", method=request.method, path=request.path)

    def after_request(self, response: Response) -> Response:
        """
        Args:
            response: The response that we're going to pass back

        Returns:
            response: The response we're going to return
        """
        if request.path not in self.ignore_paths:
            logger = self.get_logger()
            logger.info(
                "request out",
                method=request.method,
                path=request.path,
                status=response.status_code,
            )

        return response

    @staticmethod
    def get_logger():
        """
        Tries to fetch a logger from context, if this is not set then it will
        return a default logger

        Args:
        Returns:
            logger: The logger from context or a default logger
        """
        if g.logger is None:
            return structlog.get_logger(__name__)

        return g.logger
