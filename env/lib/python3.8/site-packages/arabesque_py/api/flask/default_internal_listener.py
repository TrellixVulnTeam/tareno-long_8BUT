from typing import Callable, List

from flask import Flask
from flask_restful import Api
from prometheus_client import multiprocess

from arabesque_py.api.flask.listener import Listener
from arabesque_py.api.flask.res.healthcheck import HealthCheckResource
from arabesque_py.api.flask.res.readycheck import ReadyCheckResource
from arabesque_py.config.config import Config
from arabesque_py.prometheus import Prometheus
from arabesque_py.prometheus.flask_http_client import PrometheusFlaskHTTPClient
from arabesque_py.prometheus.flask_middleware import PrometheusFlaskMiddleware


class DefaultInternalListener(Listener):
    """
    The DefaultInternalListener features a sidecar for a service that you want
    to be able to use prometheus with and feature a healthcheck endpoint.
    """

    prometheus: Prometheus
    config: Config
    healthchecks: List[Callable[[], bool]]

    def __init__(
        self,
        prometheus: Prometheus,
        config: Config,
        middleware=None,
        healthchecks: List[Callable[[], bool]] = None,
    ):
        """
        Args:
            prometheus: The service prometheus instance
            config: The service config
            middleware: Any extra middleware
            healthchecks: Custom healthcheck functions to run on every
                healthcheck endpoint request
        """
        self.provider = Flask(__name__)
        self.api = Api(self.provider)
        self.prometheus = prometheus
        self.config = config
        self.middleware = [
            PrometheusFlaskMiddleware(prometheus.registry, prometheus.metrics_path),
            *self.parse_middleware(middleware),
        ]
        self.healthchecks = healthchecks

        self.register_internal_resources()

    def register_internal_resources(self):
        """
        Registers the internal resources; Metrics, healthcheck and readiness
        endpoint.
        """

        healthcheck_resource = HealthCheckResource(self.healthchecks)
        self.add_route("/_internal/healthcheck", healthcheck_resource)

        self.add_route("/_internal/readycheck", ReadyCheckResource)
        self.add_route(
            "/_internal/metrics",
            PrometheusFlaskHTTPClient,
            resource_class_kwargs={
                "registry": self.prometheus.registry,
                "path": self.prometheus.metrics_path,
                "threaded": self.prometheus.threaded,
                "multiproc_dir": self.prometheus.multiproc_dir,
            },
        )

    def start(self):
        """
        Signals the start of the API
        """
        super().start()

        if self.prometheus.threaded:
            multiprocess.MultiProcessCollector(self.prometheus.registry)

    def parse_middleware(self, middleware) -> list:
        """
        Parses the middleware request param into a list
        Args:
            middleware: The middleware request param

        Returns:
            list: A list of middleware
        """
        if middleware is None:
            middleware = []
        elif not isinstance(middleware, list):
            middleware = [middleware]

        return middleware
