import falcon


class Response:
    """
    This is meant as a helper for building responses for a service API
    """

    status: str = falcon.HTTP_OK
    falcon_response: falcon.Response
    data = None
    errors = None

    def __init__(self, resp: falcon.Response, data=None):
        """
        Starts a new response flow.

        Args:
            resp: The falcon response
            data: You can set the data for the response here or set it later on
        """
        self.falcon_response = resp
        self.data = data

    def respond_404(self, errors=None):
        """
        Responds with a 404.

        Args:
            errors: Can customise the 404 error, or will use the default
        """
        self.status = falcon.HTTP_404
        if errors is None:
            errors = ["Item was not found"]
        self.errors = errors
        self.respond()

    def respond_503(self):
        """
        Responds with a 503.
        """
        self.status = falcon.HTTP_503
        self.respond()

    def respond(self):
        """
        Sets all the Falcon params to what the service wants to respond with -
        remember to `return` after using this function.
        """
        self.falcon_response.status = self.status
        self.falcon_response.media = {
            "status": self.get_status_code(),
            "status_desc": self.get_status_desc(),
        }

        if self.errors is not None:
            if not isinstance(self.errors, list):
                self.errors = [self.errors]
            self.falcon_response.media["errors"] = self.errors
        else:
            self.falcon_response.media["data"] = self.data

    def get_status_code(self) -> int:
        """
        Gets the status code from the status field
        Returns:
            status
        """
        return int(self.status[:3])

    def get_status_desc(self) -> str:
        """
        Gets the status description from the status field

        Returns:
            status_description
        """
        return self.status[3:].strip()
