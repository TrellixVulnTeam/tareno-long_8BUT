import json
import os
from typing import Callable, List

import falcon
from apispec import APISpec
from apispec.core import Components
from apispec.ext.marshmallow import MarshmallowPlugin
from falcon_apispec import FalconPlugin
from falcon_cors import CORS

from arabesque_py.api.falcon import middleware as service_middleware
from arabesque_py.api.falcon.default_internal_listener import DefaultInternalListener
from arabesque_py.config.config import Config
from arabesque_py.prometheus import Prometheus
from arabesque_py.prometheus.falcon_middleware import PrometheusFalconMiddleware


class DefaultAPI(DefaultInternalListener):
    """
    The DefaultAPI features helpers for building simple APIs

    Examples::

        from apispec import APISpec
        from apispec.ext.marshmallow import MarshmallowPlugin
        from arabesque_py.api.default_api import DefaultAPI
        from arabesque_py.logging import setup as setup_logging
        from arabesque_py.prometheus import Prometheus
        from arabesque_py.config.config import Config as ServiceConfig


        class Config(ServiceConfig):
            pass

        class ExampleResource:
            pass

        setup_logging()
        config = Config()
        prometheus = Prometheus()

        spec = APISpec(
            title='Title',
            version='0.1',
            openapi_version='3.0.2',
            info={
                'contact':     {
                    'name':  'Example',
                    'email': 'example@example.com'
                },
                'description': 'Example description',
            },
            plugins=[
                MarshmallowPlugin()
            ]
        )

        api = DefaultAPI(spec, prometheus, config)
        api.add_route('/example_endpoint', ExampleResource())
        api.dump_spec('./spec/openapi-spec.json')
        provider = api.provider
    """

    spec: APISpec
    prometheus: Prometheus
    config: Config

    def __init__(
        self,
        spec: APISpec,
        prometheus: Prometheus,
        config: Config,
        middleware: list = None,
        healthchecks: List[Callable[[], bool]] = None,
    ):
        """
        Args:
            spec (APISpec): The APISpec
            prometheus (Prometheus): The service prometheus instance
            config (Config): The service config
            middleware (list): Any extra middleware
            healthchecks (List[Callable[[], bool]]): Custom healthcheck
                functions to run on every healthcheck endpoint request
        """
        cors = CORS(allow_all_origins=True)

        self.provider = falcon.API(
            middleware=[
                service_middleware.RequestIDMiddleware(),
                service_middleware.ContextLoggerMiddleware(),
                service_middleware.RequestLoggerMiddleware(prometheus.metrics_path),
                PrometheusFalconMiddleware(
                    prometheus.registry, prometheus.metrics_path
                ),
                cors.middleware,
                *self.parse_middleware(middleware),
                service_middleware.RequireJSONMiddleware(),
            ]
        )

        self.spec = spec
        self.build_api_spec()

        self.prometheus = prometheus
        self.config = config
        self.healthchecks = healthchecks

        self.provider.req_options.strip_url_path_trailing_slash = True

        self.register_internal_resources()

    def dump_spec(self, path: str = "./spec", filename: str = "/openapi-spec.json"):
        """
        Dumps the API spec to a specified director, creates the dir if doesn't
        exist

        Args:
            path: The directory to dump the spec to.
            filename: The file name of the spec.
        """
        if not os.path.exists(path):
            os.makedirs(path)

        for route, resource in self.routes.items():
            self.provider.add_route(route, resource)
            self.spec.path(resource=resource)

        with open(f"{path}/{filename}", "w") as stream:
            json.dump(self.spec.to_dict(), stream)

    def build_api_spec(self):
        """
        Builds the API Spec, injects the plugins require for the DefaultAPI
        """
        if len(self.spec.plugins) == 0:
            self.spec.plugins = []
        self.spec.plugins.append(FalconPlugin(self.provider))
        self.spec.plugins.append(MarshmallowPlugin())

        self.spec.components = Components(self.spec.plugins, self.spec.openapi_version)

        for plugin in self.spec.plugins:
            plugin.init_spec(self.spec)
