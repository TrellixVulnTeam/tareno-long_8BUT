from typing import List

import structlog
from falcon import Request, Response


class RequestLoggerMiddleware:
    ignore_paths: List[str] = [
        "/_internal/healthcheck",
        "/_internal/readycheck",
        "/_internal/metrics",
    ]

    def __init__(self, *ignore_paths: str):
        """
        This middleware logs the request and the response

        Args:
            *ignore_paths: A tuple of ignore paths
        """
        self.ignore_paths.extend(list(ignore_paths))

    def process_request(self, request: Request, response: Response):
        """
        Args:
            request: The request
            response: The response
        """
        if request.path not in self.ignore_paths:
            logger = self.get_logger(request)
            logger.info("request in", method=request.method, path=request.relative_uri)

    def process_response(
        self, request: Request, response: Response, resource, req_succeeded: bool
    ):
        """
        Args:
            request: The request
            response: The response
            resource: The resource that handles the request
            req_succeeded: If the request succeeded or not
        """
        if request.path not in self.ignore_paths:
            resource = f"{resource.__class__.__module__}.{resource.__class__.__name__}"

            logger = self.get_logger(request)
            logger.info(
                "request out",
                method=request.method,
                path=request.relative_uri,
                status=int(response.status[:3]),
                resource=resource,
                req_succeeded=req_succeeded,
            )

    @staticmethod
    def get_logger(request):
        """
        Tries to fetch a logger from context, if this is not set then it will
        return a default logger

        Args:
            request: The request context

        Returns:
            logger: The logger from context or a default logger
        """
        if request.context.log is None:
            return structlog.get_logger(__name__)

        return request.context.log
