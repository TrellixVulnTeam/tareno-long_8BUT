from falcon import Request, Response
from sqlalchemy.orm import sessionmaker


class SQLAlchemySessionMiddleware:
    """
    Create a SQLAlchemy DB session on every request, then closes/rollbacks
    depending on if the request succeeded
    """

    def __init__(self, session: sessionmaker):
        """
        Args:
            session: The DB session maker
        """
        self.session = session

    def process_resource(self, request: Request, response: Response, resource, params):
        """
        Starts a new db session for the request context.
        Args:
            request: The request
            response: The response
            resource: The resource that handles the request
            params: The extra params
        """
        if request.method == "OPTIONS":
            return

        request.context.db = self.session()

    def process_response(
        self, request: Request, response: Response, resource, req_succeeded: bool
    ):
        """
        Process the response, if request succeed and there is a db session context
        then commit else rollback the transaction.
        Args:
            request: The request
            response: The response
            resource: The resource that handles the request
            req_succeeded: If the request succeeded or not
        """
        if request.method == "OPTIONS":
            return
        if request.context.get("db"):
            if not req_succeeded:
                request.context.db.rollback()
            request.context.db.close()
