import time

from prometheus_client import REGISTRY, Counter, Histogram


class PrometheusMiddleware:
    ignore_paths = [
        "/_internal/healthcheck",
        "/_internal/readycheck",
    ]

    def __init__(self, registry, metrics_path: str):
        """
        A Falcon prometheus middleware

        Args:
            metrics_path: The path that the metrics will be accessible for
            prometheus - i.e. /_internal/metrics
        """
        self.ignore_paths.append(metrics_path)
        self.registry = registry if registry is not None else REGISTRY
        self.requests = Counter(
            "http_total_request",
            "Counter of total HTTP requests",
            ["method", "path", "status"],
            registry=self.registry,
        )
        self.request_histogram = Histogram(
            "request_latency_seconds",
            "Histogram of request latency",
            ["method", "path", "status"],
            registry=self.registry,
        )

    def finish_request(self, start_time: float, path: str, status: int, method: str):
        """
        Updates the metrics for the given start time, path, status and method
        Args:
            start_time: When this request was started
            path: The path this request is serving
            status: The response status code
            method: The request method
        """
        resp_time = time.time() - start_time

        if path not in self.ignore_paths:
            self.requests.labels(method=method, path=path, status=status).inc()
            self.request_histogram.labels(
                method=method, path=path, status=status
            ).observe(resp_time)
