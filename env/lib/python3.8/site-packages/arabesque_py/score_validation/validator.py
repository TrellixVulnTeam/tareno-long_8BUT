from abc import ABC
from datetime import datetime
from typing import Any, Dict, List

from prometheus_client import Counter

from arabesque_py import prometheus
from arabesque_py.prometheus.prometheus import Prometheus


class Validator(ABC):
    prometheus: Prometheus
    app_name: str

    def __init__(
        self,
        app_name: str,
        prometheus: Prometheus,
    ) -> None:
        self.app_name = app_name
        self.prometheus = prometheus

        """
        These are default metrics created for calculation applications.
        The idea is that job_success would fire and increment on success,
        and job_failure would fire and increment on failure.

        Please see short_validator.py for instance for an example of expected use.

        To add custom metrics from an inheriting class do something like we have below:

        if not hasattr(self.prometheus, "new_metric"):
            self.prometheus.new_metric = Counter(
                "new_metric",
                "Counter for a job success",
                registry=self.prometheus.registry,
            )
        
        The reason we wrap it in an if statement is in the case we have two validators at the same time, it prevents the 
        same metric from being duplicated.
        """
        if not hasattr(self.prometheus, "validation_job_success"):
            self.prometheus.validation_job_success = Counter(
                "validation_job_success",
                "Counter for a job success",
                registry=self.prometheus.registry,
            )
        if not hasattr(self.prometheus, "validation_job_failure"):
            self.prometheus.validation_job_failure = Counter(
                "validation_job_failure",
                "Counter for a job failure",
                registry=self.prometheus.registry,
            )
        if not hasattr(self.prometheus, "app_exception"):
            self.prometheus.app_exception = Counter(
                "app_exception",
                "Counter for an application throwing an exception",
                registry=self.prometheus.registry,
            )

    def set_job_success(self):
        self.prometheus.validation_job_success.inc()
        self.push_metrics()

    def set_job_failure(self):
        self.prometheus.validation_job_failure.inc()
        self.push_metrics()

    def set_app_exception(self):
        self.prometheus.app_exception.inc()
        self.push_metrics()

    def push_metrics(self) -> None:
        self.prometheus.push(
            self.app_name, grouping_key={"timestamp": str(datetime.utcnow())}
        )
