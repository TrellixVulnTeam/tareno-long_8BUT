from datetime import datetime
from typing import Optional

from dateutil import parser
from marshmallow.fields import Field


class Timestamp(Field):
    """
    A timestamp field for marshmallow/JSONAPI - enables serializing of int,
    datetime and timestamp_pb2 fields into unix timestamps.
    """

    default_error_messages = {
        "invalid": "Not a valid datetime or int or google.protobuf.timestamp.proto",
    }

    def _serialize(self, value, attr: str, obj, **kwargs) -> Optional[int]:
        if isinstance(value, datetime):
            return int(value.timestamp())
        elif isinstance(value, int):
            return value
        elif isinstance(value, float):
            return int(value)
        elif hasattr(value, "seconds"):
            return int(value.seconds)
        elif isinstance(value, str):
            try:
                return int(datetime.fromisoformat(value).timestamp())
            except:
                return int(parser.isoparse(value).timestamp())
        if self.allow_none:
            return None

        raise self.make_error("invalid")

    def _deserialize(self, value, attr, data, **kwargs) -> datetime:
        if (
            not isinstance(value, int)
            and not isinstance(value, float)
            and not isinstance(value, str)
        ):
            raise self.make_error("invalid")

        return datetime.fromtimestamp(int(value))
