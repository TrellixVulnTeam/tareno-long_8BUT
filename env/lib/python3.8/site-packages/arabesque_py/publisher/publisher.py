from abc import ABCMeta

import prometheus_client
import structlog
from google.api_core.exceptions import AlreadyExists
from google.cloud import pubsub_v1
from google.cloud.pubsub_v1 import PublisherClient
from google.protobuf.message import Message
from prometheus_client import Counter, Gauge

from arabesque_py.prometheus import Prometheus

log = structlog.getLogger(__name__)


class Publisher(object, metaclass=ABCMeta):
    """
    Represents a GCP PubSub Publisher

    Example::

        class TestPublisher(Publisher):
            pass
        tp = TestPublisher("arabesque-sray-dev", "srv-topic-1")
        for i in range(6):
            # Can publish just strings
            f = tp.publish(f"hello {i}")
            print(f.result()) # prints out the message id

            # Can also publish protobuf
            p = ExampleProtobuf()
            tp.publish_protobuf(p)
    """

    project_id: str
    topic: str
    publisher: PublisherClient
    prometheus: Prometheus
    auto_metrics: bool
    publish_metric: bool = False

    def __init__(
        self,
        project: str,
        topic: str,
        prometheus: Prometheus = None,
        auto_metrics: bool = False,
    ):
        """
        Args:
            project: The GCP project ID
            topic: The topic to publish to
            prometheus: A prometheus instance
            auto_metrics: If set will register and log pre-defined metrics.
        """
        self.publisher = pubsub_v1.PublisherClient()

        self.project_id = project
        self.topic = self.publisher.topic_path(project, topic)

        if prometheus is not None and auto_metrics:
            self.publish_metric = True
            self.prometheus = prometheus
            self.setup_prometheus()
        try:
            self.publisher.create_topic(self.topic)
        except AlreadyExists:
            pass

        log.info(f"setup pubsub publisher complete - topic: {self.topic}")

    def publish(self, data):
        """
        Publishes a data str/bytes using the class publisher

        Args:
            data: the data to publish

        Returns:
            future
        """
        if isinstance(data, str):
            data = bytes(data, "utf8")

        if self.publish_metric:
            self.prometheus.pubsub_published_messages.labels(
                project_id=self.project_id,
                topic=self.topic,
            ).inc()

        log.info("published pubsub message", topic=self.topic)

        return self.publisher.publish(self.topic, data)

    def publish_protobuf(self, proto: Message):
        """
        Publishes a protobuf using the class publisher

        Args:
            proto: The protobuf to publish

        Returns:
            future
        """

        if self.publish_metric:
            self.prometheus.pubsub_published_messages.labels(
                project_id=self.project_id,
                topic=self.topic,
            ).inc()

        return self.publisher.publish(self.topic, proto.SerializeToString())

    def setup_prometheus(self):
        """
        This sets up various useful metrics if `self.prometheus` and
        `self.auto_metrics` is set. The following metrics are registered:

        - `pubsub_published_messages`: A counter of how many messages we've
        published
        - `pubsub_publisher_running`: A counter of how many publisher instances
        we have running
        """

        # We need to check if prometheus has these attributes due to multiple
        # publishers might be registered

        registry = (
            self.prometheus.registry
            if self.prometheus.registry is not None
            else prometheus_client.REGISTRY
        )

        if not hasattr(self.prometheus, "pubsub_published_messages"):
            self.prometheus.pubsub_published_messages = Counter(
                "pubsub_published_messages",
                "Counter of pubsub published messages",
                ["project_id", "topic"],
                registry=registry,
            )

        if not hasattr(self.prometheus, "pubsub_publisher_running"):
            self.prometheus.pubsub_publisher_running = Gauge(
                "pubsub_publisher_running",
                "Counter of pubsub publisher running - useful for debugging how many consumers you have running",
                ["project_id", "topic"],
                registry=registry,
                multiprocess_mode="liveall",
            )

        self.prometheus.pubsub_publisher_running.labels(
            project_id=self.project_id, topic=self.topic
        ).inc()
        pass
