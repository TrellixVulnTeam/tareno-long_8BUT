import typing

import marshmallow as ma

from arabesque_py.sray_db import IS_SRAY_DB_INSTALLED
from arabesque_py.sray_db.schema.mapper import map_bidirectionally
from arabesque_py.sray_db.schema.unversioned_app import UnversionedAppSchema


class AppSchema(ma.Schema):
    """
    References an existing App instance that is declared in the AppRegistry

    Example:
        from arabesque_py.sray_db import AppSchema
        app = AppSchema().load({'name': 'ESG', 'version': (2, 6, 2, 0)})
        print(app)  # Output: <App ESG (2.6.2.0)>
        print(AppSchema(load_only=['unversioned_app']).dump(app))  # Output: {'name': 'ESG', 'version': (2, 6, 2, 0)}
    ```
    """

    name = ma.fields.String(attribute="unversioned_app.name")
    version = ma.fields.Tuple([ma.fields.Integer()] * 4, required=True)
    unversioned_app = ma.fields.Nested(UnversionedAppSchema(), required=True)

    @ma.pre_load
    def _expand_data(self, data, **kwargs):
        """
        For usability, the nested data from the `unversioned_app` field is automatically mapped bidirectionally to
        the `name` field, so the user is free to specify the unversioned_app either with a nested `unversioned_app`
        object or with a `name` string as a reference to the UnversionedApp. Both approaches are equivalent.
        """
        map_bidirectionally(data=data, attributes=["name", "unversioned_app.name"])

        # The flattened fields should never overwrite the attributes of the nested field after the nested field has
        # already been loaded, since this can lead to unexpected side effects (bypassing the nested object's loading
        # and initialization logic). Since marshmallow loads the fields in random order, we enforce that the flattened
        # fields are never used to be directly assigned to the nested object by removing them from the dataset before
        # loading.
        data.pop("name", None)

        return data

    @ma.post_load
    def make_app(self, data: typing.Dict, **kwargs) -> "sray_db.apps.app.App":
        """Return an sray_db App instance if sray_db is installed, else just pass on the data"""
        if not IS_SRAY_DB_INSTALLED:
            return data

        unversioned_app, version = data["unversioned_app"], data["version"]
        app = unversioned_app[version]

        return app
