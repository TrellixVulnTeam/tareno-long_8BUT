import io
import logging
import sys

import structlog
from pythonjsonlogger import jsonlogger
from structlog.contextvars import bind_contextvars


def setup(
    level: int = logging.INFO,
    version: str = None,
    stream: io.TextIOWrapper = sys.stdout,
):
    """
    Set ups the general purpose logger

    Args:
        level (int): The level to log at
        version (str): The app version
        stream (io.TextIOWrapper): The stream to output to i.e. stdout/stderr
    """
    structlog.configure(
        processors=[
            structlog.contextvars.merge_contextvars,
            structlog.processors.TimeStamper(),
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.add_log_level_number,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.stdlib.render_to_log_kwargs,
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
    )

    handler = logging.StreamHandler(stream=stream)
    handler.setFormatter(jsonlogger.JsonFormatter())
    root_logger = logging.getLogger()
    root_logger.addHandler(handler)
    root_logger.setLevel(level)

    if version is not None:
        bind_contextvars(version=version)
